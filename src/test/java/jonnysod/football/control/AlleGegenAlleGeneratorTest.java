/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jonnysod.football.control;

import jonnysod.football.model.Spieler;
import jonnysod.football.model.Spieltag;
import jonnysod.football.model.Team;
import net.jqwik.api.constraints.Size;
import net.jqwik.api.*;

import java.util.List;

import static com.google.common.collect.Iterables.size;
import static org.junit.Assert.assertTrue;

public class AlleGegenAlleGeneratorTest {

    @Property
    public void testGenerateSpieltag(@ForAll @Size(min = 2, max = 10)List<@From("genTeam") Team> teamList) {
        SpieltagGenerator generator = new AlleGegenAlleGenerator();
        TurnierOptionen optionen = new TurnierOptionen(60);
        Spieltag spieltag = generator.generateSpieltag(teamList, optionen);
        assertTrue(spieltag.size() >= teamList.size());
    }

    @Provide
    Arbitrary<Team> genTeam() {
        Arbitrary<String> nameGen = Arbitraries.strings().withCharRange('a', 'z')
                .ofMinLength(3).ofMaxLength(10);
        Arbitrary<Spieler> spielerGen = genSpieler();
        Arbitrary<List<Spieler>> spielerListGen = spielerGen.collect(list -> size(list) > 5);
        return Combinators.combine(nameGen, spielerListGen).as((name, spielerList) -> {
            Team team = new Team(name, name);
            team.addAll(spielerList);
            return team;
        });
    }

    @Provide
    Arbitrary<Spieler> genSpieler() {
        Arbitrary<String> nameGen = Arbitraries.strings().withCharRange('a', 'z')
                .ofMinLength(3).ofMaxLength(10);
        return Combinators.combine(nameGen, nameGen).as((name, id) -> {
            Spieler spieler = new Spieler();
            spieler.setName(name);
            spieler.setId(id);
            return spieler;
        });
    }
}
